package com.example.fittingChart;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.fittingChart.database.FittingData;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "FITTING_DATA".
*/
public class FittingDataDao extends AbstractDao<FittingData, Integer> {

    public static final String TABLENAME = "FITTING_DATA";

    /**
     * Properties of entity FittingItem.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Number = new Property(0, Integer.class, "number", true, "NUMBER");
        public final static Property DurationTime = new Property(1, long.class, "durationTime", false, "DURATION_TIME");
        public final static Property RestTime = new Property(2, long.class, "restTime", false, "REST_TIME");
        public final static Property LocalTime = new Property(3, long.class, "localTime", false, "LOCAL_TIME");
        public final static Property Des = new Property(4, String.class, "des", false, "DES");
    }


    public FittingDataDao(DaoConfig config) {
        super(config);
    }
    
    public FittingDataDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"FITTING_DATA\" (" + //
                "\"NUMBER\" INTEGER PRIMARY KEY ," + // 0: number
                "\"DURATION_TIME\" INTEGER NOT NULL ," + // 1: durationTime
                "\"REST_TIME\" INTEGER NOT NULL ," + // 2: restTime
                "\"LOCAL_TIME\" INTEGER NOT NULL ," + // 3: localTime
                "\"DES\" TEXT);"); // 4: des
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"FITTING_DATA\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, FittingData entity) {
        stmt.clearBindings();
 
        Integer number = entity.getNumber();
        if (number != null) {
            stmt.bindLong(1, number);
        }
        stmt.bindLong(2, entity.getDurationTime());
        stmt.bindLong(3, entity.getRestTime());
        stmt.bindLong(4, entity.getLocalTime());
 
        String des = entity.getDes();
        if (des != null) {
            stmt.bindString(5, des);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, FittingData entity) {
        stmt.clearBindings();
 
        Integer number = entity.getNumber();
        if (number != null) {
            stmt.bindLong(1, number);
        }
        stmt.bindLong(2, entity.getDurationTime());
        stmt.bindLong(3, entity.getRestTime());
        stmt.bindLong(4, entity.getLocalTime());
 
        String des = entity.getDes();
        if (des != null) {
            stmt.bindString(5, des);
        }
    }

    @Override
    public Integer readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0);
    }    

    @Override
    public FittingData readEntity(Cursor cursor, int offset) {
        FittingData entity = new FittingData( //
            cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0), // number
            cursor.getLong(offset + 1), // durationTime
            cursor.getLong(offset + 2), // restTime
            cursor.getLong(offset + 3), // localTime
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // des
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, FittingData entity, int offset) {
        entity.setNumber(cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0));
        entity.setDurationTime(cursor.getLong(offset + 1));
        entity.setRestTime(cursor.getLong(offset + 2));
        entity.setLocalTime(cursor.getLong(offset + 3));
        entity.setDes(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    @Override
    protected final Integer updateKeyAfterInsert(FittingData entity, long rowId) {
        return entity.getNumber();
    }
    
    @Override
    public Integer getKey(FittingData entity) {
        if(entity != null) {
            return entity.getNumber();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(FittingData entity) {
        return entity.getNumber() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
