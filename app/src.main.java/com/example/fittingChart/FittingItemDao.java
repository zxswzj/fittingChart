package com.example.fittingChart;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.fittingChart.database.FittingItem;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "FITTING_ITEM".
*/
public class FittingItemDao extends AbstractDao<FittingItem, String> {

    public static final String TABLENAME = "FITTING_ITEM";

    /**
     * Properties of entity FittingItem.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Name = new Property(0, String.class, "name", true, "NAME");
        public final static Property Number = new Property(1, Integer.class, "number", false, "NUMBER");
        public final static Property DurationTime = new Property(2, long.class, "durationTime", false, "DURATION_TIME");
        public final static Property RestTime = new Property(3, long.class, "restTime", false, "REST_TIME");
        public final static Property LocalTime = new Property(4, long.class, "localTime", false, "LOCAL_TIME");
        public final static Property Des = new Property(5, String.class, "des", false, "DES");
        public final static Property Unit = new Property(6, String.class, "unit", false, "UNIT");
        public final static Property Set = new Property(7, Integer.class, "set", false, "SET");
        public final static Property ToolNumber = new Property(8, Integer.class, "toolNumber", false, "TOOL_NUMBER");
        public final static Property ToolUnit = new Property(9, String.class, "toolUnit", false, "TOOL_UNIT");
    }


    public FittingItemDao(DaoConfig config) {
        super(config);
    }
    
    public FittingItemDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"FITTING_ITEM\" (" + //
                "\"NAME\" TEXT PRIMARY KEY NOT NULL ," + // 0: name
                "\"NUMBER\" INTEGER," + // 1: number
                "\"DURATION_TIME\" INTEGER NOT NULL ," + // 2: durationTime
                "\"REST_TIME\" INTEGER NOT NULL ," + // 3: restTime
                "\"LOCAL_TIME\" INTEGER NOT NULL ," + // 4: localTime
                "\"DES\" TEXT," + // 5: des
                "\"UNIT\" TEXT," + // 6: unit
                "\"SET\" INTEGER," + // 7: set
                "\"TOOL_NUMBER\" INTEGER," + // 8: toolNumber
                "\"TOOL_UNIT\" TEXT);"); // 9: toolUnit
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"FITTING_ITEM\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, FittingItem entity) {
        stmt.clearBindings();
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(1, name);
        }
 
        Integer number = entity.getNumber();
        if (number != null) {
            stmt.bindLong(2, number);
        }
        stmt.bindLong(3, entity.getDurationTime());
        stmt.bindLong(4, entity.getRestTime());
        stmt.bindLong(5, entity.getLocalTime());
 
        String des = entity.getDes();
        if (des != null) {
            stmt.bindString(6, des);
        }
 
        String unit = entity.getUnit();
        if (unit != null) {
            stmt.bindString(7, unit);
        }
 
        Integer set = entity.getSet();
        if (set != null) {
            stmt.bindLong(8, set);
        }
 
        Integer toolNumber = entity.getToolNumber();
        if (toolNumber != null) {
            stmt.bindLong(9, toolNumber);
        }
 
        String toolUnit = entity.getToolUnit();
        if (toolUnit != null) {
            stmt.bindString(10, toolUnit);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, FittingItem entity) {
        stmt.clearBindings();
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(1, name);
        }
 
        Integer number = entity.getNumber();
        if (number != null) {
            stmt.bindLong(2, number);
        }
        stmt.bindLong(3, entity.getDurationTime());
        stmt.bindLong(4, entity.getRestTime());
        stmt.bindLong(5, entity.getLocalTime());
 
        String des = entity.getDes();
        if (des != null) {
            stmt.bindString(6, des);
        }
 
        String unit = entity.getUnit();
        if (unit != null) {
            stmt.bindString(7, unit);
        }
 
        Integer set = entity.getSet();
        if (set != null) {
            stmt.bindLong(8, set);
        }
 
        Integer toolNumber = entity.getToolNumber();
        if (toolNumber != null) {
            stmt.bindLong(9, toolNumber);
        }
 
        String toolUnit = entity.getToolUnit();
        if (toolUnit != null) {
            stmt.bindString(10, toolUnit);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public FittingItem readEntity(Cursor cursor, int offset) {
        FittingItem entity = new FittingItem( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // name
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // number
            cursor.getLong(offset + 2), // durationTime
            cursor.getLong(offset + 3), // restTime
            cursor.getLong(offset + 4), // localTime
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // des
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // unit
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // set
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // toolNumber
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9) // toolUnit
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, FittingItem entity, int offset) {
        entity.setName(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setNumber(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setDurationTime(cursor.getLong(offset + 2));
        entity.setRestTime(cursor.getLong(offset + 3));
        entity.setLocalTime(cursor.getLong(offset + 4));
        entity.setDes(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setUnit(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setSet(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setToolNumber(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setToolUnit(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
     }
    
    @Override
    protected final String updateKeyAfterInsert(FittingItem entity, long rowId) {
        return entity.getName();
    }
    
    @Override
    public String getKey(FittingItem entity) {
        if(entity != null) {
            return entity.getName();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(FittingItem entity) {
        return entity.getName() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
